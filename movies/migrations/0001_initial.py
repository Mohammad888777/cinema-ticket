# Generated by Django 4.1.4 on 2022-12-24 07:43

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import movies.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('actor_name', models.CharField(max_length=200)),
                ('actor_image', models.ImageField(blank=True, default='a.png', null=True, upload_to=movies.models.save_actor_image)),
                ('is_star', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='CompanySponser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Day',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_week', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Genres',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genres_name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('ticket_price', models.IntegerField(blank=True, null=True)),
                ('user_ip', models.CharField(blank=True, max_length=200, null=True)),
                ('movie_time', models.TimeField(blank=True, null=True)),
                ('timeAdded', models.DateTimeField(auto_now_add=True)),
                ('show_type', models.IntegerField(blank=True, choices=[(1, 'online'), (2, 'offline')], null=True)),
                ('is_seen_by_user', models.BooleanField(blank=True, default=False, null=True)),
                ('online_count', models.IntegerField(blank=True, default=0, null=True)),
                ('offline_count', models.IntegerField(blank=True, default=0, null=True)),
                ('poster', models.ImageField(blank=True, default='a.png', null=True, upload_to='MoviesPoster')),
                ('description', models.TextField(blank=True, null=True)),
                ('point', models.IntegerField(default=0)),
                ('year_made', models.IntegerField(blank=True, null=True)),
                ('director', models.CharField(blank=True, max_length=200, null=True)),
                ('writer', models.CharField(blank=True, max_length=200, null=True)),
                ('producer', models.CharField(blank=True, max_length=200, null=True)),
                ('photographer', models.CharField(blank=True, max_length=200, null=True)),
                ('editor', models.CharField(blank=True, max_length=200, null=True)),
                ('cameraman', models.CharField(blank=True, max_length=200, null=True)),
                ('actors', models.ManyToManyField(blank=True, related_name='actors', to='movies.actor')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Seat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seat_no', models.IntegerField()),
                ('occupant_first_name', models.CharField(max_length=200)),
                ('occupant_last_name', models.CharField(max_length=200)),
                ('occupant_email_name', models.CharField(max_length=200)),
                ('is_purchased', models.BooleanField(default=False)),
                ('purchase_time', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag_name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Time',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_time', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MovieVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(blank=True, null=True, upload_to=movies.models.video_directory_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp4', 'mp3', 'mk4'])])),
                ('poster', models.ImageField(blank=True, default='a.png', null=True, upload_to='VideoReviewPoster')),
                ('subject', models.CharField(blank=True, max_length=200, null=True)),
                ('video_time', models.CharField(blank=True, max_length=200, null=True)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.movie')),
            ],
        ),
        migrations.CreateModel(
            name='MovieImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to=movies.models.images_directory_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['png', 'jpg', 'jpeg'])])),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.movie')),
            ],
        ),
        migrations.AddField(
            model_name='movie',
            name='booked_seats',
            field=models.ManyToManyField(blank=True, to='movies.seat'),
        ),
        migrations.AddField(
            model_name='movie',
            name='days',
            field=models.ManyToManyField(blank=True, related_name='days', to='movies.day'),
        ),
        migrations.AddField(
            model_name='movie',
            name='genre',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='genre', to='movies.genres'),
        ),
        migrations.AddField(
            model_name='movie',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='movies.movie'),
        ),
        migrations.AddField(
            model_name='movie',
            name='sponsor',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sponsor', to='movies.companysponser'),
        ),
        migrations.AddField(
            model_name='movie',
            name='tag',
            field=models.ManyToManyField(blank=True, related_name='tags', to='movies.tag'),
        ),
        migrations.AddField(
            model_name='movie',
            name='times',
            field=models.ManyToManyField(blank=True, related_name='times', to='movies.time'),
        ),
        migrations.AddField(
            model_name='actor',
            name='role',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='movies.role'),
        ),
    ]
